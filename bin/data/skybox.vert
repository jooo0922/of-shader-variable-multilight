#version 410

// layout 을 이용해서 버텍스 셰이더에서 각 버텍스 데이터가 저장된 순서를 알려줌. (오픈프레임웍스가 버텍스 데이터를 저장하는 순서는 p.74 참고)
layout(location = 0) in vec3 pos;

uniform mat4 mvp; // c++ (오픈프레임웍스)에서 합쳐준 투영 * 뷰 * 모델 행렬을 전달받는 유니폼 변수
out vec3 fromCam;

void main() {
  /*
    cube.ply 의 오브젝트 공간의 버텍스를 프래그먼트 셰이더로
    바로 보간해서 내보내고 있음. 

    왜 월드좌표로 변환하지 않고 그냥 내보낸걸까?

    이 예제에서는 큐브맵의 오브젝트공간 좌표를
    카메라 위치와 일치시킨 상태이므로, 현재 카메라가
    큐브맵의 안쪽 정가운데 원점에 위치하고 있는 상태임.

    이런 상황에서, 책에서도 봤듯이 프래그먼트 셰이더에서는
    원점에 있는 카메라가 큐브맵의 어느 방향을 바라보느냐를 의미하는
    '방향 벡터'를 이용해서 큐브맵 샘플링을 한다고 했지?

    그렇다면, 메쉬 원점(카메라)을 기준으로 지정되어 있는 cube.ply의 버텍스 위치들은
    카메라를 중심으로 큐브맵을 바라보는 '방향벡터' 라고도 할 수 있겠지?

    그렇기 때문에 별도로 월드좌표로 변환하지 않고도,
    메쉬의 오브젝트 공간 원점에서 뻗어나오는 버텍스 위치를
    방향벡터로도 써먹을 수 있기 때문에 그냥 프래그먼트 셰이더로
    보낸 뒤, 보간하여 사용하려는 것임.  
  */
  fromCam = pos;

  /*
    스카이박스의 원근분할 무효화

    스카이박스는 씬에서 볼 수 있는 대상 중 가장 멀리있는 대상이지만,
    투영공간에서 유일하게 원근분할 ( 원근 분할 설명은 p.260 ~ 261 참고) 이 적용이 안되어야 함.
    왜냐면, 스카이박스는 무한히 뻗어나가는 하늘을 보여줘야 하기 때문에, 여기에 원근효과를 적용하는 건 적절치 않음.

    따라서, 스카이박스는 버텍스 셰이더에서 w컴포넌트와 z컴포넌트를 일치시켜 원근분할을 무효화하는데,
    이는 원근분할 단계에서 w컴포넌트르 각 x, y, z 를 나눈 값을 NDC 좌표로 사용하기 때문임.

    따라서, w값이 크면 클수록 NDC 좌표 상에서 버텍스를 화면의 가운데로 끌어당기는(원근감이 생기겠지?)
    효과를 볼 수 있음.

    참고로, 이러한 버텍스 위치벡터의 실제 w컴포넌트 값은
    glm::perspective() 함수에서 넘겨주는 near, far 값을 사용해서
    계산하도록 되어있음.

    따라서, 원근분할은 오로지 원근투영행렬(perspective()) 에서만 적용되며,
    스카이박스는 Swizzling 을 통해 최종 버텍스 위치로 넘겨주는 값 (mvp 행렬과 곱해서 투영변환까지 완료된 상태에서~)
    z, w 컴포넌트를 동일하게 맞춤으로써,
    z / w 로 계산되는 NDC 좌표를 1.0 으로 맞춰서
    스카이박스의 버텍스들에 대해서만 예외적으로 원근분할을 무효화함. 
  */
  gl_Position = (mvp * vec4(pos, 1.0)).xyww;
}